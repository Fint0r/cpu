-- Generated by Fintor Jozsef's script.

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity tb_CU is
end tb_CU;

architecture tb of tb_CU is
	component CU
		port (
			func	:	in STD_LOGIC_VECTOR (3 downto 0);
			target	:	in STD_LOGIC_VECTOR (11 downto 0);
			clock	:	in STD_LOGIC;
			neg	:	in STD_LOGIC;
			a_reg_load	:	out STD_LOGIC;
			b_reg_load	:	out STD_LOGIC;
			a_reg_data	:	out STD_LOGIC_VECTOR (7 downto 0);
			b_reg_data	:	out STD_LOGIC_VECTOR (7 downto 0);
			pc_load	:	out STD_LOGIC;
			pc_load_data	:	out STD_LOGIC_VECTOR (15 downto 0);
			alu_addr	:	out STD_LOGIC_VECTOR (3 downto 0);
			BRAM_PORTA_0_addr	:	in STD_LOGIC_VECTOR ( 3 downto 0 );
			BRAM_PORTA_0_din	:	in STD_LOGIC_VECTOR ( 7 downto 0 );
			BRAM_PORTA_0_dout	:	out STD_LOGIC_VECTOR ( 7 downto 0 );
			BRAM_PORTA_0_en	:	in STD_LOGIC;
			BRAM_PORTA_0_we	:	in STD_LOGIC_VECTOR ( 0 to 0 ));
	end component;

	 signal func	: STD_LOGIC_VECTOR (3 downto 0);
	 signal target	: STD_LOGIC_VECTOR (11 downto 0);
	 signal clock	: STD_LOGIC;
	 signal neg	: STD_LOGIC;
	 signal a_reg_load	: STD_LOGIC;
	 signal b_reg_load	: STD_LOGIC;
	 signal a_reg_data	: STD_LOGIC_VECTOR (7 downto 0);
	 signal b_reg_data	: STD_LOGIC_VECTOR (7 downto 0);
	 signal pc_load	: STD_LOGIC;
	 signal pc_load_data	: STD_LOGIC_VECTOR (15 downto 0);
	 signal alu_addr	: STD_LOGIC_VECTOR (3 downto 0);
	 signal BRAM_PORTA_0_addr	: STD_LOGIC_VECTOR ( 3 downto 0 );
	 signal BRAM_PORTA_0_din	: STD_LOGIC_VECTOR ( 7 downto 0 );
	 signal BRAM_PORTA_0_dout	: STD_LOGIC_VECTOR ( 7 downto 0 );
	 signal BRAM_PORTA_0_en	: STD_LOGIC;
	 signal BRAM_PORTA_0_we	: STD_LOGIC_VECTOR ( 0 to 0 );

begin

	dut : CU
	port map (
			func	 => func,
			target	 => target,
			clock	 => clock,
			neg	 => neg,
			a_reg_load	 => a_reg_load,
			b_reg_load	 => b_reg_load,
			a_reg_data	 => a_reg_data,
			b_reg_data	 => b_reg_data,
			pc_load	 => pc_load,
			pc_load_data	 => pc_load_data,
			alu_addr	 => alu_addr,
			BRAM_PORTA_0_addr	 => BRAM_PORTA_0_addr,
			BRAM_PORTA_0_din	 => BRAM_PORTA_0_din,
			BRAM_PORTA_0_dout	 => BRAM_PORTA_0_dout,
			BRAM_PORTA_0_en	 => BRAM_PORTA_0_en,
			BRAM_PORTA_0_we	 => BRAM_PORTA_0_we);

	stimuli : process

	begin
		-- Write initialization here.


		-- Write stimuli here.


		wait;
	end process;

end tb;